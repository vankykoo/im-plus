package com.vanky.im.gateway.config;

import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
import com.alibaba.cloud.nacos.registry.NacosRegistration;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.cloud.client.serviceregistry.Registration;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.net.InetAddress;
import java.util.UUID;

/**
 * 网关实例ID管理器
 * 负责生成和管理网关实例的唯一标识
 * 
 * 遵循SOLID原则：
 * - SRP: 专门负责网关实例ID的生成和管理
 * - OCP: 支持多种ID生成策略，可扩展
 * - DIP: 依赖抽象的配置接口，而非具体实现
 * 
 * 体现KISS原则：简单直接的ID生成逻辑
 * 体现DRY原则：统一的实例ID获取方式
 * 
 * @author vanky
 * @since 2025-08-16
 */
@Slf4j
@Component
public class GatewayInstanceManager {

    @Autowired(required = false)
    private Registration registration;
    
    @Autowired(required = false)
    private NacosDiscoveryProperties nacosDiscoveryProperties;
    
    @Value("${server.node-id:}")
    private String configuredNodeId;
    
    @Value("${server.port:8080}")
    private int serverPort;
    
    private String gatewayInstanceId;
    
    @PostConstruct
    public void init() {
        this.gatewayInstanceId = generateGatewayInstanceId();
        log.info("网关实例ID初始化完成: {}", gatewayInstanceId);
    }
    
    /**
     * 获取网关实例ID
     * 优先级：Nacos实例ID > 配置的node-id > 自动生成
     * 
     * @return 网关实例ID
     */
    public String getGatewayInstanceId() {
        return gatewayInstanceId;
    }
    
    /**
     * 生成网关实例ID
     * 按优先级尝试不同的生成策略
     */
    private String generateGatewayInstanceId() {
        // 策略1: 使用Nacos注册的实例ID（推荐）
        String nacosInstanceId = getNacosInstanceId();
        if (nacosInstanceId != null && !nacosInstanceId.trim().isEmpty()) {
            log.info("使用Nacos实例ID作为网关标识: {}", nacosInstanceId);
            return nacosInstanceId;
        }
        
        // 策略2: 使用配置文件中的node-id
        if (configuredNodeId != null && !configuredNodeId.trim().isEmpty()) {
            log.info("使用配置的node-id作为网关标识: {}", configuredNodeId);
            return configuredNodeId;
        }
        
        // 策略3: 自动生成（IP + 端口 + UUID后缀）
        String autoGeneratedId = generateAutoInstanceId();
        log.info("自动生成网关实例ID: {}", autoGeneratedId);
        return autoGeneratedId;
    }
    
    /**
     * 获取Nacos实例ID
     */
    private String getNacosInstanceId() {
        try {
            if (registration instanceof NacosRegistration) {
                NacosRegistration nacosRegistration = (NacosRegistration) registration;
                String instanceId = nacosRegistration.getInstanceId();
                log.debug("获取到Nacos实例ID: {}", instanceId);
                return instanceId;
            }
        } catch (Exception e) {
            log.warn("获取Nacos实例ID失败", e);
        }
        return null;
    }
    
    /**
     * 自动生成实例ID
     * 格式: gateway-{IP}-{PORT}-{UUID_SUFFIX}
     */
    private String generateAutoInstanceId() {
        try {
            String hostAddress = InetAddress.getLocalHost().getHostAddress();
            String uuidSuffix = UUID.randomUUID().toString().substring(0, 8);
            return String.format("gateway-%s-%d-%s", hostAddress, serverPort, uuidSuffix);
        } catch (Exception e) {
            log.warn("获取本机IP失败，使用UUID生成实例ID", e);
            return "gateway-" + UUID.randomUUID().toString();
        }
    }
    
    /**
     * 检查是否启用了Nacos服务发现
     */
    public boolean isNacosEnabled() {
        return registration != null && nacosDiscoveryProperties != null;
    }
}
